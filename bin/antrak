#!/usr/bin/env python3
#
# AnTrak - Activity and location data analysis
#
# Copyright (C) 2017-2018 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import asyncio
import argparse
import geotiler
import logging
from dateutil.parser import parse as date_parse

import antrak.bc.track
import antrak.bc.report
import antrak.bc.map

def common_args(parser):
    """
    Add common arguments to a parser of AnTrak commands.
    """
    parser.add_argument(
        '-d', '--device', dest='device', default='default',
        help='location device (i.e. GPS, phone) identifier'
    )

desc = """\
AnTrak 0.1.0.

Activity and location data analysis.
"""
parser = argparse.ArgumentParser(description=desc)
parser.add_argument(
    '-v', '--verbose', action='store_true', dest='verbose', default=False,
    help='explain what is being done'
)
main_parser = parser.add_subparsers(dest='subcmd')

# command: import
sub_parser = main_parser.add_parser('import')
common_args(sub_parser)
sub_parser.add_argument(
    'files', nargs='+',
    help='Files containing GPS positions (NMEA format)'
)

# command: track
sub_parser_track = main_parser.add_parser('track').add_subparsers(dest='subcmd')

# command: track list
# search and list tracks
sub_parser = sub_parser_track.add_parser('list')
sub_parser.add_argument('query', nargs='?', help='trip and track name query')
common_args(sub_parser)

# command: track set
# add or update track
sub_parser = sub_parser_track.add_parser('set')
sub_parser.add_argument('trip', help='trip name')
sub_parser.add_argument('name', help='track name')
sub_parser.add_argument('start', help='track start time')
sub_parser.add_argument('end', nargs='?', help='track end time')
common_args(sub_parser)

# command: report
sub_parser_report = main_parser.add_parser('report').add_subparsers(dest='subcmd')

# command: report stats
# report basic track statistics
sub_parser = sub_parser_report.add_parser('stats')
sub_parser.add_argument('query', help='trip and track name query')
common_args(sub_parser)

# command: map
providers = geotiler.providers()
sub_parser = main_parser.add_parser('map')
sub_parser.add_argument(
    '-p', '--provider', dest='provider', choices=providers, default='osm',
    help='map provider id'
)
sub_parser.add_argument(
    '-s', '--size', dest='size', nargs=2, type=int, default=(1920, 1080),
    help='size of map image'
)

sub_parser.add_argument('query', help='trip and track name query')
common_args(sub_parser)

args = parser.parse_args()

logger = logging.getLogger('antrak')
level = logging.DEBUG if args.verbose else logging.WARN
fmt = '%(asctime)s:%(levelname)s:%(name)s:%(thread)s:%(message)s'
logging.basicConfig(format=fmt)
logger.setLevel(level)

if args.subcmd == 'import':
    task = antrak.bc.track.save_pos(args.device, args.files)

elif args.subcmd == 'list':  # track list
    task = antrak.bc.track.track_list(args.device, args.query)

elif args.subcmd == 'set':  # track set
    start = date_parse(args.start)
    end = date_parse(args.end) if args.end else start
    task = antrak.bc.track.track_set(
        args.device, args.trip, args.name, start, end
    )

elif args.subcmd == 'stats':  # report stats
    task = antrak.bc.report.track_stats(args.device, args.query)

elif args.subcmd == 'map':
    task = antrak.bc.map.render(
        args.device, args.query, args.provider, args.size
    )

else:
    parser.print_usage()
    parser.exit()

loop = asyncio.get_event_loop()
loop.run_until_complete(task)

# vim: sw=4:et:ai
