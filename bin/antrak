#!/usr/bin/env python3
#
# AnTrak - Activity and location data analysis
#
# Copyright (C) 2017 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import asyncio
import argparse
import logging
from antrak.util import flatten

def common_args(parser):
    """
    Add common arguments to a parser of AnTrak commands.
    """
    parser.add_argument(
        '-d', '--device', dest='device', default='default',
        help='location device (i.e. GPS, phone) identifier, default "unknown"'
    )

desc = """\
AnTrak 0.1.0.

Activity and location data analysis.
"""
parser = argparse.ArgumentParser(description=desc)
parser.add_argument(
    '-v', '--verbose', action='store_true', dest='verbose', default=False,
    help='explain what is being done'
)
main_parser = parser.add_subparsers(dest='subcmd')

# command: import
sub_parser = main_parser.add_parser('import')
common_args(sub_parser)
sub_parser.add_argument(
    'files', nargs='+',
    help='Files containing GPS positions (NMEA format)'
)

# command: track
sub_parser_track = main_parser.add_parser('track').add_subparsers(dest='subcmd')

# command: track set
# add or update track
sub_parser = sub_parser_track.add_parser('set')
sub_parser.add_argument('trip', help='trip name')
sub_parser.add_argument('name', help='track name')
sub_parser.add_argument('start', help='track start time')
sub_parser.add_argument('end', nargs='?', help='track end time')

# command: report
sub_parser_report = main_parser.add_parser('report').add_subparsers(dest='subcmd')

# command: report stats
# add or update track
sub_parser = sub_parser_report.add_parser('stats')
sub_parser.add_argument('trip', help='trip name')

args = parser.parse_args()

logger = logging.getLogger('antrak')
level = logging.DEBUG if args.verbose else logging.WARN
fmt = '%(asctime)s:%(levelname)s:%(name)s:%(thread)s:%(message)s'
logging.basicConfig(format=fmt)
logger.setLevel(level)

if args.subcmd == 'import':
    from antrak.nmea import parse_points
    from antrak.db import save_pos

    data = flatten(parse_points(open(fn)) for fn in args.files)
    task = save_pos(args.device, data)

elif args.subcmd == 'set':  # track set
    from antrak.db import tx, track_add, track_find_period
    from dateutil.parser import parse as date_parse
    dev = 'default'  # FIXME: args.dev

    start = date_parse(args.start)
    end = date_parse(args.end) if args.end else start

    @tx
    async def track_add_(dev, trip, name, start, end):
        start, end = await track_find_period(dev, start, end)
        task = await track_add(dev, trip, name, start, end)

    task = track_add_(dev, args.trip, args.name, start, end)

elif args.subcmd == 'stats':  # report stats
    from antrak.db import track_summary
    from datetime import timedelta

    dev = 'default'

    fmt = ' {:%Y-%m-%d} {:%H:%M:%S} {:%H:%M:%S}  {}  {}  {} km  {} km/h'.format

    async def report_stats(dev, trip):
        data = await track_summary(dev, trip)
        started = True
        for item in data:
            if started:
                print(item['trip'])
            started = False

            duration = timedelta(seconds=item['duration'])
            distance = round(item['distance'] / 1000)
            max_speed = round(item['max_speed'])

            s = fmt(
                item['start'], item['start'], item['end'],
                item['name'],
                duration, distance,
                max_speed
            )
            print(s)

    task = report_stats(dev, args.trip)

loop = asyncio.get_event_loop()
loop.run_until_complete(task)

# vim: sw=4:et:ai
